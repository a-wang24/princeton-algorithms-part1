import java.util.Iterator;
import java.lang.IllegalArgumentException;
import java.util.NoSuchElementException;
import java.lang.UnsupportedOperationException;

public class Deque<Item> implements Iterable<Item> {
	//* size of stack *//
	private int n;
	
	//* front of stack *//
	private Node first;
	
	//* end of stack *//
	private Node last;
	
	//* helper linked list class *//
	private class Node {
		private Item item;
		private Node next;
	}
	
	//* constructor for empty deque *//
	public Deque() {
		first = null;
		last = null;
		n = 0;
		//assert check();
	}
	
	//* check if deque is empty *//
	public boolean isEmpty() {
		return n == 0;
	}
	
	//* return number of items in deque *//
	public int size() {
		return n;
	}
	
	//* add item to the front *//
	public void addFirst(Item item) {
		if (item == null ) throw new IllegalArgumentException();
		
	}
	
	//* add item to the end *//
	public void addLast(Item item) {
		if (item == null ) throw new IllegalArgumentException();
	}
	
	//* remove and return item from the front *//
	public Item removeFirst() {}
	
	//* remove and return item from the end *//
	public Item removeLast() {}
	
	//* return an iterator over items in order from front to end *//
	public Iterator<Item> iterator() {}
	
	//* Unit Testing *//
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
